<?php
namespace user\user;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 结构体定义
 */
class UserInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $userName = null;
  /**
   * @var string
   */
  public $nickName = null;
  /**
   * @var string
   */
  public $portrait = null;
  /**
   * @var string
   */
  public $intro = null;
  /**
   * @var string
   */
  public $mobileNo = null;
  /**
   * @var string
   */
  public $email = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'portrait',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'intro',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'mobileNo',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'email',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['userName'])) {
        $this->userName = $vals['userName'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['portrait'])) {
        $this->portrait = $vals['portrait'];
      }
      if (isset($vals['intro'])) {
        $this->intro = $vals['intro'];
      }
      if (isset($vals['mobileNo'])) {
        $this->mobileNo = $vals['mobileNo'];
      }
      if (isset($vals['email'])) {
        $this->email = $vals['email'];
      }
    }
  }

  public function getName() {
    return 'UserInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->userName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->portrait);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->intro);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobileNo);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->email);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UserInfo');
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 1);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userName !== null) {
      $xfer += $output->writeFieldBegin('userName', TType::STRING, 2);
      $xfer += $output->writeString($this->userName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 3);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->portrait !== null) {
      $xfer += $output->writeFieldBegin('portrait', TType::STRING, 4);
      $xfer += $output->writeString($this->portrait);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->intro !== null) {
      $xfer += $output->writeFieldBegin('intro', TType::STRING, 5);
      $xfer += $output->writeString($this->intro);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobileNo !== null) {
      $xfer += $output->writeFieldBegin('mobileNo', TType::STRING, 6);
      $xfer += $output->writeString($this->mobileNo);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->email !== null) {
      $xfer += $output->writeFieldBegin('email', TType::STRING, 7);
      $xfer += $output->writeString($this->email);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


